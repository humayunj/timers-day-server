{"version":3,"sources":["components/TimerViewer/index.tsx","components/TimerEditor/index.tsx","store/hooks.ts","api/client.tsx","components/features/timersSlice.ts","components/pages/home/index.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["TimerViewer","props","useState","Date","now","diff","setDiff","useInterval","d","startTimeMs","immediate","title","actions","EditOutlined","style","color","blue","primary","onClick","onEditClick","DeleteOutlined","red","onDeleteClick","textAlign","level","size","getUTCHours","toString","padStart","getUTCMinutes","getUTCSeconds","TimerEditor","defaultName","onSaveClick","onDiscardClick","isLoading","error","useForm","form","type","loading","e","submit","danger","disabled","fontSize","labelCol","span","wrapperCol","name","initialValues","onFinish","getFieldValue","onFinishFailed","Item","label","rules","required","message","autoFocus","placeholder","useAppSelector","useSelector","baseURL","client","get","url","a","axios","data","statusCode","Error","post","body","put","delete","fetchTimers","createAsyncThunk","apiClient","result","list","updateTimer","id","createTimer","deleteTimer","timersSlice","createSlice","initialState","timers","status","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","map","t","rejected","timer","find","meta","arg","filter","push","selectTimers","Title","Typography","Home","dispatch","useDispatch","timersStatus","editingTimer","setEditingTimer","creating","setCreating","useEffect","useCallback","ind","then","unwrapResult","finally","onCreateNew","length","marginTop","paddingBottom","justifyContent","align","leaveReverse","component","Row","componentProps","gutter","n","i","maxWidth","margin","startTime","shape","ev","icon","PlusOutlined","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","timersReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb56f226.chunk.js","sourcesContent":["// import S from \"./TimerViewer.module.css\";\r\nimport { Card, Space } from \"antd\";\r\nimport { red, blue } from \"@ant-design/colors\";\r\n\r\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nimport Text from \"antd/lib/typography/Text\";\r\nimport Title from \"antd/lib/typography/Title\";\r\nimport { useState } from \"react\";\r\nimport { useInterval } from \"ahooks\";\r\n\r\nexport interface ITimerViewer {\r\n  onDeleteClick: () => void;\r\n  onEditClick: () => void;\r\n  title: string;\r\n  startTimeMs: number;\r\n}\r\n\r\nexport default function TimerViewer(props: ITimerViewer) {\r\n  let [diff, setDiff] = useState<Date>(new Date(Date.now()));\r\n\r\n  useInterval(\r\n    () => {\r\n      let d = new Date(Date.now() - props.startTimeMs);\r\n      setDiff(d);\r\n    },\r\n    1000,\r\n    { immediate: true }\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      title={props.title}\r\n      actions={[\r\n        <EditOutlined\r\n          style={{ color: blue.primary }}\r\n          onClick={props.onEditClick}\r\n          key=\"edit\"\r\n        />,\r\n        <DeleteOutlined\r\n          style={{ color: red.primary }}\r\n          onClick={props.onDeleteClick}\r\n          key=\"delete\"\r\n        />,\r\n      ]}\r\n      style={{ textAlign: \"left\" }}\r\n    >\r\n      <Title style={{ textAlign: \"center\" }} level={2}>\r\n        <Space size=\"small\">\r\n          <Text>{diff.getUTCHours().toString().padStart(2, \"0\")}</Text>\r\n          <Text>:</Text>\r\n          <Text>{diff.getUTCMinutes().toString().padStart(2, \"0\")}</Text>\r\n          <Text>:</Text>\r\n          <Text>{diff.getUTCSeconds().toString().padStart(2, \"0\")}</Text>\r\n        </Space>\r\n      </Title>\r\n    </Card>\r\n  );\r\n}\r\n","// import S from \"./TimerViewer.module.css\";\r\nimport { Card, Form, Input, Button } from \"antd\";\r\nimport Title from \"antd/lib/typography/Title\";\r\nimport { useForm } from \"antd/lib/form/Form\";\r\n\r\nexport interface ITimeEditorProps {\r\n  onSaveClick: (name: string) => void;\r\n  onDiscardClick: () => void;\r\n  defaultName: string;\r\n  isLoading: boolean;\r\n  error?: string;\r\n}\r\n\r\nexport default function TimerEditor({\r\n  defaultName,\r\n  onSaveClick,\r\n  onDiscardClick,\r\n  isLoading,\r\n  error,\r\n}: ITimeEditorProps) {\r\n  let [form] = useForm();\r\n\r\n  const layout = {\r\n    labelCol: { span: 12 },\r\n    wrapperCol: { span: 16 },\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      title=\"Edit Timer\"\r\n      actions={[\r\n        <Button\r\n          type=\"link\"\r\n          loading={isLoading}\r\n          onClick={(e) => {\r\n            form.submit();\r\n          }}\r\n        >\r\n          Save\r\n        </Button>,\r\n        <Button\r\n          danger\r\n          type=\"link\"\r\n          disabled={isLoading}\r\n          onClick={onDiscardClick}\r\n        >\r\n          Discard\r\n        </Button>,\r\n      ]}\r\n      style={{ textAlign: \"left\" }}\r\n    >\r\n      <Title style={{ textAlign: \"center\", fontSize: \"12pt\" }} level={2}>\r\n        <Form\r\n          {...layout}\r\n          name=\"basic\"\r\n          initialValues={{ name: defaultName }}\r\n          onFinish={() => {\r\n            onSaveClick(form.getFieldValue(\"name\"));\r\n          }}\r\n          onFinishFailed={() => {}}\r\n          form={form}\r\n        >\r\n          <Form.Item\r\n            label=\"Timer Name\"\r\n            name=\"name\"\r\n            rules={[{ required: true, message: \"Please input timer name!\" }]}\r\n          >\r\n            <Input autoFocus={true} placeholder=\"Timer Name\" />\r\n          </Form.Item>\r\n        </Form>\r\n      </Title>\r\n    </Card>\r\n  );\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"./store\";\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import axios from \"axios\";\r\n\r\nconst baseURL = \"/api\";\r\n\r\nlet client: any = {};\r\n\r\n/**\r\n * @param url\r\n * @returns\r\n */\r\nclient.get = async (url: string) => {\r\n  try {\r\n    const { data } = await axios.get(baseURL + url);\r\n    if (data.statusCode !== 200)\r\n      throw new Error(data.error || \"Something went wrong\");\r\n\r\n    return data.data;\r\n  } catch (er) {\r\n    throw er;\r\n  }\r\n};\r\n\r\nclient.post = async (url: string, body: any) => {\r\n  try {\r\n    const { data } = await axios.post(baseURL + url, body);\r\n    if (data.statusCode !== 200)\r\n      throw new Error(data.error || \"Something went wrong\");\r\n\r\n    return data.data;\r\n  } catch (er) {\r\n    throw er;\r\n  }\r\n};\r\n\r\nclient.put = async (url: string, body: any) => {\r\n  try {\r\n    const { data } = await axios.put(baseURL + url, body);\r\n    if (data.statusCode !== 200)\r\n      throw new Error(data.error || \"Something went wrong\");\r\n    return data.data;\r\n  } catch (er) {\r\n    throw er;\r\n  }\r\n};\r\n\r\nclient.delete = async (url: string) => {\r\n  try {\r\n    const { data } = await axios.delete(baseURL + url);\r\n    if (data.statusCode !== 200)\r\n      throw new Error(data.error || \"Something went wrong\");\r\n\r\n    return data.data;\r\n  } catch (er) {\r\n    throw er;\r\n  }\r\n};\r\n\r\nexport default client;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../store/store\";\r\nimport apiClient from \"../../api/client\";\r\n\r\ninterface ITimer {\r\n  id: string;\r\n  title: string;\r\n  startTime: number;\r\n  status: string;\r\n  error: string;\r\n}\r\n\r\ninterface TimersState {\r\n  timers: Array<ITimer>;\r\n  status: string;\r\n  error: string;\r\n}\r\n\r\nconst initialState: TimersState = {\r\n  timers: [],\r\n  status: \"idle\",\r\n  error: \"\",\r\n};\r\n\r\nexport const fetchTimers = createAsyncThunk(\"timers/fetchTimers\", async () => {\r\n  let result = (await apiClient.get(\"/timers\")).list;\r\n  return result;\r\n});\r\n\r\nexport const updateTimer = createAsyncThunk(\r\n  \"timers/updateTimer\",\r\n  async ({ id, title }: { id: string; title: string }) => {\r\n    let result = await apiClient.post(\"/timers/\" + id, {\r\n      title,\r\n    });\r\n\r\n    return result;\r\n  }\r\n);\r\n\r\nexport const createTimer = createAsyncThunk(\r\n  \"timers/createTimer\",\r\n  async ({ title }: { title: string }) => {\r\n    let result = await apiClient.put(\"/timers\", {\r\n      title,\r\n    });\r\n\r\n    return result;\r\n  }\r\n);\r\n\r\nexport const deleteTimer = createAsyncThunk(\r\n  \"timers/deleteTimer\",\r\n  async (id: string) => {\r\n    let result = await apiClient.delete(\"/timers/\" + id);\r\n\r\n    return result;\r\n  }\r\n);\r\n\r\nexport const timersSlice = createSlice({\r\n  name: \"timers\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchTimers.pending, (state, action) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchTimers.fulfilled, (state, action) => {\r\n        state.timers = action.payload.map((t: ITimer) => ({\r\n          ...t,\r\n          status: \"idle\",\r\n          error: \"\",\r\n        }));\r\n        state.status = \"completed\";\r\n      })\r\n      .addCase(\r\n        fetchTimers.rejected,\r\n        (state, action: PayloadAction<any, any, any, any>) => {\r\n          state.status = \"failed\";\r\n          if (action.error) state.error = action.error.message;\r\n        }\r\n      )\r\n      .addCase(\r\n        updateTimer.fulfilled,\r\n        (state, action: PayloadAction<any, any, any>) => {\r\n          const { id, title } = action.payload;\r\n          let timer = state.timers.find((timer) => timer.id === id);\r\n          if (timer) {\r\n            timer.title = title;\r\n            timer.status = \"completed\";\r\n          }\r\n        }\r\n      )\r\n      .addCase(updateTimer.pending, (state, action) => {\r\n        const { id } = action.meta.arg;\r\n\r\n        let timer = state.timers.find((timer) => timer.id === id);\r\n        if (timer) timer.status = \"loading\";\r\n      })\r\n      .addCase(\r\n        updateTimer.rejected,\r\n        (state, action: PayloadAction<any, any, any, any>) => {\r\n          const { id } = action.meta.arg;\r\n          let timer = state.timers.find((timer) => timer.id === id);\r\n          if (timer) {\r\n            timer.error = action.error.message;\r\n            timer.status = \"failed\";\r\n          }\r\n        }\r\n      )\r\n      .addCase(deleteTimer.fulfilled, (state, action: PayloadAction<any>) => {\r\n        // const { id } = action.payload;\r\n        // state.timers = state.timers.filter((timer) => timer.id !== id);\r\n      })\r\n      .addCase(deleteTimer.pending, (state, action) => {\r\n        const id = action.meta.arg;\r\n        state.timers = state.timers.filter((timer) => timer.id !== id);\r\n      })\r\n      .addCase(createTimer.fulfilled, (state, action: PayloadAction<any>) => {\r\n        state.timers.push({ ...action.payload, status: \"idle\", error: \"\" });\r\n      });\r\n  },\r\n});\r\n\r\nexport const selectTimers = (state: RootState) => state.timers.timers;\r\n\r\nexport default timersSlice.reducer;\r\n","import { Row, Col, Typography, Spin, Button } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport QueueAnim from \"rc-queue-anim\";\r\n\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\n// import S from \"./Home.module.css\";\r\nimport TimerViewer from \"../../TimerViewer\";\r\nimport TimerEditor from \"../../TimerEditor\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../store/hooks\";\r\nimport {\r\n  createTimer,\r\n  deleteTimer,\r\n  fetchTimers,\r\n  selectTimers,\r\n  updateTimer,\r\n} from \"../../features/timersSlice\";\r\nimport { unwrapResult } from \"@reduxjs/toolkit\";\r\nconst Title = Typography.Title;\r\n\r\nexport interface IHomeProps {}\r\nexport default function Home(props: IHomeProps) {\r\n  let dispatch = useAppDispatch();\r\n  let timers = useAppSelector(selectTimers) as Array<any>;\r\n  let timersStatus = useAppSelector((state) => state.timers.status);\r\n  // let timersError = useAppSelector((state) => state.timers.error);\r\n\r\n  let [editingTimer, setEditingTimer] = useState(-1);\r\n  let [creating, setCreating] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (timersStatus === \"idle\") dispatch(fetchTimers());\r\n  }, [dispatch, timersStatus]);\r\n\r\n  const onEditClick = useCallback((ind) => {\r\n    setEditingTimer(ind);\r\n  }, []);\r\n  const onSaveClick = useCallback(\r\n    (id: string, title: string) => {\r\n      dispatch(updateTimer({ id, title }))\r\n        .then(unwrapResult)\r\n        .then((payload) => {})\r\n        .finally(() => setEditingTimer(-1));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const onDiscardClick = useCallback(\r\n    (ind) => {\r\n      setEditingTimer(-1);\r\n    },\r\n    [setEditingTimer]\r\n  );\r\n  const onDeleteClick = useCallback(\r\n    (id: string) => {\r\n      dispatch(deleteTimer(id));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const onCreateNew = useCallback(() => {\r\n    setCreating(true);\r\n    dispatch(createTimer({ title: \"Timer\" }))\r\n      .then(unwrapResult)\r\n      .then((timer: any) => {\r\n        setEditingTimer(timers.length);\r\n      })\r\n      .finally(() => setCreating(false));\r\n  }, [timers, dispatch]);\r\n\r\n  return (\r\n    <Row\r\n      style={{\r\n        marginTop: \"10px\",\r\n        paddingBottom: \"50px\",\r\n        justifyContent: \"center\",\r\n      }}\r\n      align=\"middle\"\r\n    >\r\n      <Col span={22}>\r\n        <Title level={1} style={{ fontSize: \"20pt\" }}>\r\n          Timers\r\n        </Title>\r\n        {timersStatus === \"loading\" ? (\r\n          <Spin />\r\n        ) : (\r\n          <QueueAnim\r\n            type=\"top\"\r\n            leaveReverse={true}\r\n            component={Row}\r\n            componentProps={{\r\n              gutter: [16, 23],\r\n              align: \"middle\",\r\n              style: { justifyContent: \"center\" },\r\n            }}\r\n          >\r\n            {timers.map((n, i) => (\r\n              <Col key={n.id} span={24}>\r\n                <div style={{ maxWidth: \"300px\", margin: \"0 auto\" }}>\r\n                  {editingTimer === i ? (\r\n                    <TimerEditor\r\n                      onSaveClick={(name) => onSaveClick(n.id, name)}\r\n                      onDiscardClick={() => onDiscardClick(i)}\r\n                      defaultName={n.title}\r\n                      isLoading={n.status === \"loading\"}\r\n                      error={n.error}\r\n                    />\r\n                  ) : (\r\n                    <TimerViewer\r\n                      onDeleteClick={() => onDeleteClick(n.id)}\r\n                      onEditClick={() => onEditClick(i)}\r\n                      startTimeMs={n.startTime}\r\n                      title={n.title}\r\n                    />\r\n                  )}\r\n                </div>\r\n              </Col>\r\n            ))}\r\n\r\n            <Col key=\"0\">\r\n              <Button\r\n                size=\"large\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                loading={creating}\r\n                onClick={(ev) => onCreateNew()}\r\n                icon={<PlusOutlined />}\r\n              />\r\n            </Col>\r\n          </QueueAnim>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/pages/home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport timersReducer from \"../components/features/timersSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    timers: timersReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}